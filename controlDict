/*--------------------------------*- C++ -*----------------------------------*\
application     rhoCentralFoam;
startFrom       startTime;
startTime       0;
stopAt          endTime;
endTime         0.005;
deltaT          1e-6;
writeControl    timeStep;
writeInterval   1000;
purgeWrite      0;
writeFormat     ascii;
writePrecision  8;
writeCompression off;
timeFormat      general;
timePrecision   6;
runTimeModifiable yes;

functions
{
    wallHeatFlux
    {
        type            wallHeatFlux;
        libs            ("libfieldFunctionObjects.so");
        writeControl    timeStep;
        writeInterval   200;
        patches         (wall);
    }

    NMSI_sensorWriter
    {
        type            coded;
        functionObjectLibs ("libutilityFunctionObjects.so");
        codeExecute
        #{
            const fvMesh& mesh = obr_.lookupObject<fvMesh>("mesh");
            if (!mesh.foundObject<volScalarField>("NMSI_sensor"))
            {
                Info<<"[NMSI] Creating sensor field\n"<<endl;
                volScalarField* sPtr = new volScalarField
                (
                    IOobject("NMSI_sensor", mesh.time().timeName(), mesh,
                             IOobject::READ_IF_PRESENT, IOobject::AUTO_WRITE),
                    mesh,
                    dimensionedScalar("zero", dimless, 0.0)
                );
                mesh.objectRegistry::store(sPtr);
            }

            volScalarField& s = const_cast<volScalarField&>(
                mesh.lookupObject<volScalarField>("NMSI_sensor")
            );

            const volVectorField& U = mesh.lookupObject<volVectorField>("U");
            const surfaceScalarField& phi = mesh.lookupObject<surfaceScalarField>("phi");
            volScalarField divU = fvc::div(phi)/mesh.V();

            const volScalarField& p = mesh.lookupObject<volScalarField>("p");
            volVectorField gradP = fvc::grad(p);
            volScalarField dCpdx = mag(gradP.component(vector::X()))/max(mag(p), SMALL);

            volVectorField curlU = fvc::curl(U);
            volScalarField vortMag = mag(curlU);

            const volScalarField& rho = mesh.lookupObject<volScalarField>("rho");
            volScalarField a = sqrt(1.4 * p / rho);
            volScalarField M = mag(U)/max(a, dimensionedScalar("tiny", a.dimensions(), SMALL));

            scalar Cp_th = 0.15;
            volScalarField s_div = sqr(min(divU, dimensionedScalar("zero", divU.dimensions(), 0.0)))
                                  /(sqr(min(divU, dimensionedScalar("zero", divU.dimensions(), 0.0))) + sqr(vortMag) + SMALL);
            volScalarField s_cp  = min(mag(dCpdx)/Cp_th, dimensionedScalar("one", dimless, 1.0));
            volScalarField s_m   = min(max(M - 5.5, dimensionedScalar("zero", dimless, 0.0))/2.0,
                                       dimensionedScalar("one", dimless, 1.0));
            s = min(max(0.5*s_div + 0.3*s_cp + 0.2*s_m,
                        dimensionedScalar("zero", dimless, 0.0)),
                    dimensionedScalar("one", dimless, 1.0));
            s.write();
        #};
    }
}
